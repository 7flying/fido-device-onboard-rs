use std::env;

const VERSION_MAJOR: &str = env!("CARGO_PKG_VERSION_MAJOR");
const VERSION_MINOR: &str = env!("CARGO_PKG_VERSION_MINOR");
const VERSION_PATCH: &str = env!("CARGO_PKG_VERSION_PATCH");
const MANIFEST_DIR: &str = env!("CARGO_MANIFEST_DIR");

fn main() {
    println!(
        "cargo:rustc-cdylib-link-arg=-Wl,-soname,libfdo_data.so.{}",
        VERSION_MAJOR
    );

    cbindgen::Builder::new()
        .with_crate(MANIFEST_DIR)
        .with_parse_deps(true)
        .with_parse_include(&["fdo-data-formats"])
        .with_include_version(true)
        .with_include_guard("FDO_DATA_H")
        .with_after_include(format!(
            "\n#define FDO_DATA_MAJOR {}\n#define FDO_DATA_MINOR {}\n#define FDO_DATA_PATCH {}",
            VERSION_MAJOR, VERSION_MINOR, VERSION_PATCH
        ))
        .with_pragma_once(true)
        .with_autogen_warning("/* This file is automatically generated, do not modify */")
        .with_style(cbindgen::Style::Both)
        .with_item_prefix("Fdo")
        .with_documentation(true)
        .with_language(cbindgen::Language::C)
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file("fdo_data.h");
}
